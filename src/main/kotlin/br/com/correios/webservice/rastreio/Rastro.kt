package br.com.correios.webservice.rastreio

import java.net.MalformedURLException
import java.net.URL
import javax.xml.namespace.QName
import javax.xml.ws.WebEndpoint
import javax.xml.ws.WebServiceClient
import javax.xml.ws.WebServiceException
import javax.xml.ws.WebServiceFeature

/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.4-b01
 * Generated source version: 2.2
 *
 */
@WebServiceClient(name = "rastro", targetNamespace = "http://resource.webservice.correios.com.br/", wsdlLocation = "https://webservice.correios.com.br/service/rastro/Rastro.wsdl")
class Rastro : javax.xml.ws.Service {
    companion object {
        private var RASTRO_WSDL_LOCATION: URL? = null
        private var RASTRO_EXCEPTION: WebServiceException? = null
        private val RASTRO_QNAME = QName("http://resource.webservice.correios.com.br/", "rastro")
        private fun __getWsdlLocation(): URL? {
            if (RASTRO_EXCEPTION != null) {
                throw RASTRO_EXCEPTION as WebServiceException
            }
            return RASTRO_WSDL_LOCATION
        }

        init {
            var url: URL? = null
            var e: WebServiceException? = null
            try {
                url = URL("https://webservice.correios.com.br/service/rastro/Rastro.wsdl")
            } catch (ex: MalformedURLException) {
                e = WebServiceException(ex)
            }
            RASTRO_WSDL_LOCATION = url
            RASTRO_EXCEPTION = e
        }
    }

    constructor() : super(__getWsdlLocation(), RASTRO_QNAME)
    constructor(vararg features: WebServiceFeature?) : super(__getWsdlLocation(), RASTRO_QNAME, *features)
    constructor(wsdlLocation: URL?) : super(wsdlLocation, RASTRO_QNAME)
    constructor(wsdlLocation: URL?, vararg features: WebServiceFeature?) : super(wsdlLocation, RASTRO_QNAME, *features)
    constructor(wsdlLocation: URL?, serviceName: QName?) : super(wsdlLocation, serviceName)
    constructor(wsdlLocation: URL?, serviceName: QName?, vararg features: WebServiceFeature?) : super(wsdlLocation, serviceName, *features)

    /**
     *
     * @return
     * returns Service
     */
    @get:WebEndpoint(name = "ServicePort")
    val servicePort: Service
        get() = super.getPort(QName("http://resource.webservice.correios.com.br/", "ServicePort"), Service::class.java)

    /**
     *
     * @param features
     * A list of [javax.xml.ws.WebServiceFeature] to configure on the proxy.  Supported features not in the `features` parameter will have their default values.
     * @return
     * returns Service
     */
    @WebEndpoint(name = "ServicePort")
    fun getServicePort(vararg features: WebServiceFeature?): Service {
        return super.getPort(QName("http://resource.webservice.correios.com.br/", "ServicePort"), Service::class.java, *features)
    }
}